<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AhF6pwJmAAAAAElFTkSuQmCC
</value>
  </data>
</root>